When would you want to use a remote repository rather than keeping all your work
local?

When I'm on a business trip or using a temporary computer to access and edit files of a repository, while I don't want to 
create a local repository on the computer.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

Because there might be a possibility that I'm working on a new feature on my local repository and I haven't finish it yet.
I want to update from remote until I finish my new feature so that the up-to-date changes wouldn't affect or mess up with
my new feature that I'm still working on with.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

-Forks: only work on GitHub repositories, which clones one repository and create another new repository on GitHub.
One can use Fork to copy/clone someone else's projects/codes on GitHub.
-Clones: work on both GitHub repository and local repository and between them. Fork is a built-in clone on GitHub,
one can also clone a repository on GitHub to his local computer. In addition, one can also clone a repository on 
a local computer to his local computer.
One can use command git clone to copy a remote repository on GitHub to his local computer.
-Branches: work on a single repository, to create a different version of codes or to test new features on a different 
version of codes.

What is the benefit of having a copy of the last known state of the remote
stored locally?

To have a base point where the diverge or changes begin to happen between remote repository and local repository. The
benefit is that Git will be able to track and merge changes if there is a last known state.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

I would probably use a pendrive to share a project. We can have a stable up-to-date version stored in a pendrive and everyone
gets a copy of it and make changes on their own computer. When one finishes his work, he could request to merge his changes into
the stable version. This way is more simpler for programmers to play with codes and gives them freedom. However when it comes to
merge, it becomes much more difficult if several people modify the same files. It would be difficult and nasty to identify every changes
that have been made and to resolve conflicts.

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

When I think the new feature or new version that I'm about to add or change is logically big enough, then it's necessary to create a new
branch and work on it. Or when I'm going to do some tests or experiments on new features/functions, it's better to do it on a new branch
without affecting the master branch. When creating a new branch, one doesn't have to be worried about affecting the master branch as long as
one doesn't merge the new branch into master branch. Working directly on master branch makes it easier to push and pull without concerning about
merging different branches.
